function sizeOfMatrix = ott_tmatrix_from_mstm(fname)
% Read in tmatrix output file generated by mstm and rearrange into
% ott order.
% Inputs: 
%     fname : path to T matrix file generated by mstm
% Author: Wyatt Vigilante
global Tmatrix;

fileID = fopen(fname, 'r') ;

% Read top line from file, keeping newline
tline = fgets(fileID);
tline = str2num(tline); %
sizeOfMatrix = tline(2); % This is the max order of the expansion (nodrt)
subMatrixSize = (sizeOfMatrix^2) + (2 * sizeOfMatrix); % nmax^2 + 2nmax

% Allocate storage for data
% the order in which these quadrants are named is exactly as a cartesian grid
% [[II, I], [III, IV]]
firstQuad = zeros(subMatrixSize, subMatrixSize); % T^{12}
secondQuad = zeros(subMatrixSize, subMatrixSize); % T^{11}
thirdQuad = zeros(subMatrixSize, subMatrixSize); % T^{21}
fourthQuad = zeros(subMatrixSize, subMatrixSize); % T^{22}

line2 = fgets(fileID); % Read line 2 of file; not used.

% Main loop to construct T-matrix by reading file line-by-line, 
% starting from line 3.
% mstm elements are T_{mnpklq}
% ott elements are T_{n,m,nprime,mprime}
while ~feof(fileID)
  line = fgets(fileID); % Read next line
  numLine = str2num(line);
  
  if length(numLine) == 3 % Line is l, k, q
     l = numLine(1);
     nprime = l;
     k = numLine(2);
     mprime = k;
     q = numLine(3);
     colPosInSubMatrix = ott.utils.combined_index(nprime,mprime); %calculating column position
  elseif length(numLine) == 4 % line is scattering efficiency convergence checks
     % do nothing
  elseif length(numLine) == 6 % line has T matrix data
     n = numLine(1);
     m = numLine(2);
     rowPosInSubMatrix = ott.utils.combined_index(n,m);
     realPFirst = numLine(3); % p = 1
     imaginaryPFirst = numLine(4);
     realPSecond = numLine(5); % p = 2
     imaginaryPSecond = numLine(6);
     if q == 1 
         % T^{22}
         fourthQuad(rowPosInSubMatrix,colPosInSubMatrix) = realPFirst + imaginaryPFirst*i;
         % T^{12}
         firstQuad(rowPosInSubMatrix,colPosInSubMatrix) = realPSecond + imaginaryPSecond*i;
     else % q = 2
         % T^{21}
         thirdQuad(rowPosInSubMatrix,colPosInSubMatrix) = realPFirst +  imaginaryPFirst*i;
         % T^{11}
         secondQuad(rowPosInSubMatrix,colPosInSubMatrix) = realPSecond + imaginaryPSecond*i; 
     end  
  end     
end

Tmatrix_data = [secondQuad, firstQuad ; thirdQuad, fourthQuad];
Tmatrix = ott.Tmatrix(Tmatrix_data, 'scattered');

fclose(fileID);

end

